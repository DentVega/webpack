- Configurando un nuevo proyecto de Javacript
Iniciar el proyecto con 
    npm init
Installar webpack
    npm install webpack --save
    npm install webpack --save --save-exact

    webpack: "4.32.2"
Cambiar webpack a dependencia de desarrollo con el comando 
    npm install webpack --save-dev --save-exact
=======================================================================
- Creando nuestro primer bundle con webpack

Vamos a instalar otra dependencia llamada webpack-cli, la 
API que expone webpack en forma de CLI (Command Line Interface) que nos va a permitir interactuar y 
configurar Webpack desde la terminal.
El comando webpack tiene una bandera llamada --mode que nos permite cambiar entre los modos 
producción y desarrollo. Recuerda que por defecto nos pone en modo producción si no la especificamos.


    Creamos dos archivos
        - index.js que tendra un console.log
        - index.html que tendra como script a index.js
    Instalamos webpack-cli con el comando  
        - npm install webpack-cli --save-dev --save-exact

        npm install webpack-cli -D -E
        -D significa -save-dev es para instalar las dependecias como desarrollador
        -E significa save-exact es para instalar la misma version con que fue desarollado el proyecto

    Observaciones
        desde webpack 4 requerimos webpack-cli

    Invocamoss a webpack con el comando 
        webpack

    Con npx llamamos a las dependencia solo en la direccion actual
        - npx webpack -v

    - tomar el archivo de javacript y pasarlo a webpack poniendo un input al archivo
        npx webpack --entry ./index.js --output ./bundle.js

        ouput  es el nombre con el que el archivo se va a llamar cuando webpack me lo entregue
        bundle es el lugar donde esta

    - si no seteamos el modo development nos pondra en modo produccion automaticamente para cambiar esto añadimos dos comandos al anterior
        npx webpack --entry ./index.js --output ./bundle.js --mode development
        npx webpack --entry ./index.js --output ./bundle.js --mode production

    - npm o npx?
        npm se usa para instalar dependecias pero no las ejecuta
        npx es para ejecutar dependecias ya instaladas
=======================================================================
Iniciando un webpack.config

Al ir creciendo nuestra configuración de Webpack iremos agregando cada vez más banderas a nuestros 
comandos y terminará como una línea gigante en la terminal. ¿Cómo hacemos que esa línea sea muy pequeñita, 
personalizable y escalable? Por medio de un archivo llamado por defecto webpack.config.js.

Este archivo permite importar módulos usando el formato commonJS y recibe por lo menos dos configuraciones básicas, 
un entry y un output.

Entry Point: Es la ruta del archivo principal de nuestra aplicación JS a ser procesado por Webpack. 
Se pueden tener varios Entry Points.
Output: Es la ruta de salida donde va a generar nuestro bundle con todos nuestros archivos especificados como Entry Points empaquetados en uno sólo.


- Paso 1: Creamos el archivo webpack.config.js
- Paso 2: Escribimos la configuracion de webpack dentro del archivo
- Paso 3: En package añadimos el script "build": "webpack" para correr el proyecto con npm run

=======================================================================
Cargando configuraciones por defecto y personalizadas

Por medio del uso de la bandera --config podemos especificar un archivo de configuración externo con el 
nombre que queramos en lugar del nombre por defecto webpack.config.js.

creamos nuevos script y usamos la bandera --config para definir el archivo deconfiguracion que desamos utilizar

=======================================================================
Multiples puntos de entrada

Paso 1: Creamos una carpeta src/ks donde guardamos nustro archivo page.js de desarrollo.
Y una carpeta dist/js donde guardaremos los page.js de produccion

Paso 2: Ahora podemos crear un script en package.json

=======================================================================
Manejo de assets con Loaders

Los Loaders son la funcionalidad que nos da Webpack para interpretar tipos de archivos no soportados de forma nativa por Javascript.

style-loader sirve para inyectar un tag style (el CSS) al DOM de nuestro HTML, mientras que css-loader sólo sirve para interpretar archivos CSS.


Paso 1: instalamos css-loader   
    - npm install --save-dev --save-exact css-loader   

    npm install --save-dev --save-exact style-loader

=======================================================================
Introduccion al uso de plugins
Los plugins sirven para extender las capacidades de webpack y dar mas poder a los loaders.

instalar el plugins
    npm install mini-css-extract-plugin html-webpack-plugin --save-dev --save-exact
     npm install mini-css-extract-plugin @0.7.0

=======================================================================

Servidor de desarrollo

Paso1: Creamos el script:
    "build:dev": "webpack --config ./webpack-dev-server/webpack.config.js --watch"
    
    watch sirve para crear un listener que escuchara los cambios en los archivos y ejecutara el comando nuevamente
    Ejemplo: Para añadir el w al comando usamos -- antes del w
        npm run build:dev -- -w

Paso 2: para que la pagina se recargue automaticamente instalamos webpack-server
    npm install -D --save-exact webpack-dev-server

Paso 3: configuramos el ultimo scrip para que en vez de llamar a webpack llame a webpack-dev-server que es un CLI
ahora no es necesarios poner -w por que webpack-dev-server se encarga de correrlo