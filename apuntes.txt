- Configurando un nuevo proyecto de Javacript
Iniciar el proyecto con 
    npm init
Installar webpack
    npm install webpack --save
    npm install webpack --save --save-exact

    webpack: "4.32.2"
Cambiar webpack a dependencia de desarrollo con el comando 
    npm install webpack --save-dev --save-exact
=======================================================================
- Creando nuestro primer bundle con webpack

Vamos a instalar otra dependencia llamada webpack-cli, la 
API que expone webpack en forma de CLI (Command Line Interface) que nos va a permitir interactuar y 
configurar Webpack desde la terminal.
El comando webpack tiene una bandera llamada --mode que nos permite cambiar entre los modos 
producción y desarrollo. Recuerda que por defecto nos pone en modo producción si no la especificamos.


    Creamos dos archivos
        - index.js que tendra un console.log
        - index.html que tendra como script a index.js
    Instalamos webpack-cli con el comando  
        - npm install webpack-cli --save-dev --save-exact

        npm install webpack-cli -D -E
        -D significa -save-dev es para instalar las dependecias como desarrollador
        -E significa save-exact es para instalar la misma version con que fue desarollado el proyecto

    Observaciones
        desde webpack 4 requerimos webpack-cli

    Invocamoss a webpack con el comando 
        webpack

    Con npx llamamos a las dependencia solo en la direccion actual
        - npx webpack -v

    - tomar el archivo de javacript y pasarlo a webpack poniendo un input al archivo
        npx webpack --entry ./index.js --output ./bundle.js

        ouput  es el nombre con el que el archivo se va a llamar cuando webpack me lo entregue
        bundle es el lugar donde esta

    - si no seteamos el modo development nos pondra en modo produccion automaticamente para cambiar esto añadimos dos comandos al anterior
        npx webpack --entry ./index.js --output ./bundle.js --mode development
        npx webpack --entry ./index.js --output ./bundle.js --mode production

    - npm o npx?
        npm se usa para instalar dependecias pero no las ejecuta
        npx es para ejecutar dependecias ya instaladas
=======================================================================
Iniciando un webpack.config

Al ir creciendo nuestra configuración de Webpack iremos agregando cada vez más banderas a nuestros 
comandos y terminará como una línea gigante en la terminal. ¿Cómo hacemos que esa línea sea muy pequeñita, 
personalizable y escalable? Por medio de un archivo llamado por defecto webpack.config.js.

Este archivo permite importar módulos usando el formato commonJS y recibe por lo menos dos configuraciones básicas, 
un entry y un output.

Entry Point: Es la ruta del archivo principal de nuestra aplicación JS a ser procesado por Webpack. 
Se pueden tener varios Entry Points.
Output: Es la ruta de salida donde va a generar nuestro bundle con todos nuestros archivos especificados como Entry Points empaquetados en uno sólo.


- Paso 1: Creamos el archivo webpack.config.js
- Paso 2: Escribimos la configuracion de webpack dentro del archivo
- Paso 3: En package añadimos el script "build": "webpack" para correr el proyecto con npm run

=======================================================================
Cargando configuraciones por defecto y personalizadas

Por medio del uso de la bandera --config podemos especificar un archivo de configuración externo con el 
nombre que queramos en lugar del nombre por defecto webpack.config.js.

creamos nuevos script y usamos la bandera --config para definir el archivo deconfiguracion que desamos utilizar

=======================================================================
Multiples puntos de entrada

Paso 1: Creamos una carpeta src/ks donde guardamos nustro archivo page.js de desarrollo.
Y una carpeta dist/js donde guardaremos los page.js de produccion

Paso 2: Ahora podemos crear un script en package.json

=======================================================================
Manejo de assets con Loaders

Los Loaders son la funcionalidad que nos da Webpack para interpretar tipos de archivos no soportados de forma nativa por Javascript.

style-loader sirve para inyectar un tag style (el CSS) al DOM de nuestro HTML, mientras que css-loader sólo sirve para interpretar archivos CSS.


Paso 1: instalamos css-loader   
    - npm install --save-dev --save-exact css-loader   

    npm install --save-dev --save-exact style-loader

=======================================================================
Introduccion al uso de plugins
Los plugins sirven para extender las capacidades de webpack y dar mas poder a los loaders.

instalar el plugins
    npm install mini-css-extract-plugin html-webpack-plugin --save-dev --save-exact
     npm install mini-css-extract-plugin @0.7.0

=======================================================================

Servidor de desarrollo

Paso1: Creamos el script:
    "build:dev": "webpack --config ./webpack-dev-server/webpack.config.js --watch"
    
    watch sirve para crear un listener que escuchara los cambios en los archivos y ejecutara el comando nuevamente
    Ejemplo: Para añadir el w al comando usamos -- antes del w
        npm run build:dev -- -w

Paso 2: para que la pagina se recargue automaticamente instalamos webpack-server
    npm install -D --save-exact webpack-dev-server

Paso 3: configuramos el ultimo scrip para que en vez de llamar a webpack llame a webpack-dev-server que es un CLI
ahora no es necesarios poner -w por que webpack-dev-server se encarga de correrlo

- Configuración del devServer en webpack.config
Para configurar el webpack-dev-server puedes agregar un objeto llamado devServer dentro de tu webpack.
    module.exports = {
    //...
    devServer: {
     // webpack-dev-server configuration
    }
    };
En el devServer podemos configurar cosas como:
    hot: Activa el HotModuleReplacementPlugin que muestra los cambios sin actualizar la página
    port: Al crear un servidor de prueba con webpack-dev-server éste tomará por defecto el puerto 8080, acá podrás cambiar el puerto.
    open: Abrirá el navegador al iniciar el servidor
    allowedHosts: Dominios que permitirá el servidor utilizar
    Etc…
- Configuraciones del devServer
HotModuleReplacementPlugin
Hot Module Replacement (HMR) es un plugin de Webpack que permite intercambiar, agregar o eliminar módulos en tiempo de ejecución, sin una recarga completa de la página.
.
Para activarlo lo tienes que importar desde webpack, agregarlo como plugin y en el devServer agregar la propiedad hot

    const webpack = require('webpack');
    module.exports = {
      //...
      devServer: {
        hot: true
      }
      plugins: [
        new webpack.HotModuleReplacementPlugin()
      ]
    };
HMR puede acelerar significativamente el desarrollo de las siguientes formas:

Conservando el estado de la aplicación que se pierde durante una recarga.
Ahorre un valioso tiempo de desarrollo actualizando solo lo que ha cambiado.
Actualice al instante el navegador cuando se realicen modificaciones a CSS / JS en el código fuente, que es casi comparable a cambiar los estilos directamente en las herramientas de desarrollo del navegador.

=======================================================================
Soporte de Javacript Moderno 

Javascript es un lenguaje moderno en evolución, siempre agregando nuevas funciones. El problema es que al ser interpretado en el navegador, 
no tenemos control sobre que versión de Javascript soportan y por lo tanto que funciones.
Para poder usar Javascript moderno y tener una buena Developer Experience sin afectar la User Experience, existe Babel. 
Babel transpila nuestro código moderno de Javascript a una una versión que todos los navegadores pueden entender.
El papel de babel será el de transpilar (convertir y adaptar código) escrito en estándares modernos (normalmente superior a ecmaScript 2015) a estándares que soporten la mayoría de los navegadores, de esta manera el desarrollador se preocupa por porgramar de manera cómoda y webpack con babel lo convierten en lo que sea mejor para los navegadores.
.
Para hacer uso de Babel en webpack, como éste tiene un loader (babel-loader), tenemos que instalar @babel/core (que tiene la funcionalidad básica de babel) 
y babel-loader e instanciar el loader dentro de nuestras rules de la siguiente manera:

module.exports = {
//
  module: {
    rules: [
      {
        test: /\.js$/,
        use: 'babel-loader', // Intercepta los archivos de js y transpila en versiones más antiguas que entiendan la mayoría de los navegadores
        exclude: /node_modules/,
      },
  },
};

Babel requerirá de configuración, ésta puede ser declarada dentro del webpack, 
pero se recomienda hacerlo dentro de un archivo llamado .babelrc que leerá babel a la hora de ser configurado por webpack.

Paso1: Instalar @babel/core babel-loader @babel/preset-env 
    npm install --save-dev --save-exact @babel/core babel-loader @babel/preset-env

Recursos Externos:
    - https://github.com/babel/babel/tree/master/packages/babel-core
    - https://github.com/babel/babel-loader
    - https://github.com/babel/babel/tree/master/packages/babel-preset-env
    - https://babeljs.io/docs/en/babel-plugin-transform-runtime

=======================================================================
Trabajando con Javascript moderno

npm install --save-dev --save-exact @babel/plugin-transform-runtime
npm install --save --save-exact @babel/runtime

configuramos .babelrc

{
  "plugins": [
    [
      "@babel/plugin-transform-runtime",
      {
        "regenerator": true
      }
    ]
  ],
  "presets": ["@babel/preset-env"]
}

=======================================================================
Soporte de JSX (React)
    npm install --save-dev @babel/preset-react --save-exact

    npm install --save --save-exact react react-dom


=======================================================================
Trabajando con React

=======================================================================
Soporte imagenes, fuentes y videos
Para soportar la importación de archivos binarios en nuestro código Javascript cómo lo son: fuentes, imágenes y videos, 
podemos usar url-loader.

url-loader transforma archivos a un cadena de texto base64 para que carguen dentro de nuestros archivos Javascript y 
así ahorrarnos un request al servidor por cada archivo transformado.

Debemos tomar en cuenta que sólo nos conviene convertir archivos pequeños, 
ya que archivos muy grandes podrían hacer nuestro archivo bundle muy pesado. 
Es por esto que la opción limit del url-loader sirve para asignar el peso máximo que un archivo puede tener para ser transformado en base64.

No olvides instalar file-loader junto con url-loader ya que cuando se sobrepasa el limite establecido en la opción limit y 
el archivo no pueda ser transformado a base64, url-loader hará uso del file-loader para insertar un nombre y ruta de archivo en el lugar correspondiente.


Paso 1: Instalamos url-loader
    npm install --save-dev --save-exact url-loader
    https://github.com/webpack-contrib/url-loader

    npm install --save-dev --save-exact file-loader

    añadimos nuevas rules en webpack.config.js

    {
        test: /\.(jpg|png|gif|woff|eot|ttf|svg|mp4|webm)$/,
        use: {
          loader: 'url-loader',
          options: {
            limit: 90000
          }
        }
      }
=======================================================================
Estilos con preprocesadores
Es una práctica común usar preprocesadores de CSS como: Sass, Less, Stylus y hasta PostCSS. 
Webpack permite integrar estos preprocesadores en su configuración a través de loaders, 
sólo ten cuidado con las peerDependencies que son dependencias que el loader espera estén instaladas previamente, 
como el caso de stylus para stylus-loader.

Paso 1: instalamos las dependecias necesarias
    npm install sass-loader stylus-loader less-loader postcss-loader --save-dev --save-exact

    https://github.com/postcss/postcss-loader
    https://github.com/shama/stylus-loader
    https://github.com/webpack-contrib/less-loader
    https://github.com/webpack-contrib/sass-loader

Paso 2: instalamos las dependecias necesarias para cada preprocesadores
    npm install stylus less node-sass --save-dev -save-exact

Añadir los loaders al webpack config: 

module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        use: 'babel-loader',
        exclude: /node_modules/
      },
      {
        test: /\.css$/,
        use: [
          'style-loader',
          {
            loader: 'css-loader',
            options: {
              importLoaders: 1
            }
          },
          'postcss-loader'
        ]
      },
      {
        test: /\.less$/,
        use: ['style-loader', 'css-loader', 'less-loader']
      },
      {
        test: /\.scss$/,
        use: ['style-loader', 'css-loader', 'sass-loader']
      },
      {
        test: /\.styl$/,
        use: ['style-loader', 'css-loader', 'stylus-loader']
      },
      {
        test: /\.(jpg|png|gif|woff|eot|ttf|svg|mp4|webm)$/,
        use: {
          loader: 'url-loader',
          options: {
            limit: 90000
          }
        }
      }
    ]
  }

Paso 4: configurara postcSS:
    npm install --save-dev --save-exact postcss-nested

Paso 5: crear el archivo postcss.config.css y configurarlo
    
=======================================================================